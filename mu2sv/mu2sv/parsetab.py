
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "nonassocASSIGNnonassoc?:nonassocIMPLIESleft|left&left!nonassoc<LEQ=NEQGEQ>left+-left*/%ALIAS ARRAY ASSERT ASSIGN BEGIN CASE CLEAR CONST DO DOTDOT ELSE ELSIF END ENUM ERROR EXISTS FOR FORALL FUNCTION GEQ ID IF IMPLIES INTCONST INVARIANT ISUNDEFINED LEQ LONGARROW NEQ OF PROCEDURE RECORD RETURN RULE RULESET STARTSTATE STRING SWITCH THEN TYPE UNDEFINE VAR WHILE\n    prog : decls procdecls rules\n    \n    decls : decls decl\n          | empty\n    \n    decl : CONST constdecls\n         | TYPE typedecls\n         | VAR vardecls\n    \n    constdecls : constdecls constdecl ';'\n               | empty\n    \n    constdecl : ID ':' expr\n    \n    typedecls : typedecls typedecl ';'\n              | empty\n    \n    typedecl : ID ':' typeexpr\n    \n    typeexpr : typeid\n             | enumtype\n             | subrangetype\n             | recordtype\n             | arraytype\n    \n    typeid : ID\n    \n    enumtype : ENUM '{' enums '}'\n    \n    enums : enums ',' ID\n          | ID\n    \n    subrangetype : expr DOTDOT expr\n    \n    recordtype : RECORD fields END\n    \n    fields : fields ';' field\n           | fields ';'\n           | field\n    \n    field : ID fieldtail\n    \n    fieldtail : ',' ID fieldtail\n              | ':' typeexpr\n    \n    arraytype : ARRAY '[' typeexpr ']' OF typeexpr\n    \n    vardecls : vardecls vardecl ';'\n             | empty\n    \n    vardecl : ID vardecltail\n    \n    vardecltail : ',' ID vardecltail\n                | ':' typeexpr\n    \n    procdecls : procdecls procdecl\n              | procdecls funcdecl\n              | empty\n    \n    procdecl : PROCEDURE ID '(' optformals ')' ';' optdecls optstmts END ';'\n    \n    funcdecl : FUNCTION ID '(' optformals ')' ':' typeexpr ';' optdecls optstmts END ';'\n    \n    optformals : formals\n               | empty\n    \n    formals : formals ';' formal\n            | formals ';'\n            | formal\n    \n    formal : VAR formalrest\n           | formalrest\n    \n    formalrest : ID formaltail\n    \n    formaltail : ',' ID formaltail\n               | ':' typeexpr\n    \n    optdecls : decls BEGIN\n             | empty\n    \n    designator : ID\n               | designator '[' expr ']'\n               | designator '.' ID\n    \n    expr : expr '?' expr ':' expr\n    \n    expr : expr IMPLIES expr\n         | expr '|' expr\n         | expr '&' expr\n         | expr '<' expr\n         | expr LEQ expr\n         | expr '>' expr\n         | expr GEQ expr\n         | expr '=' expr\n         | expr NEQ expr\n         | expr '+' expr\n         | expr '-' expr\n         | expr '*' expr\n         | expr '/' expr\n         | expr '%' expr\n    \n    expr : '!' expr\n         | '+' expr %prec '*'\n         | '-' expr %prec '*'\n    \n    expr : INTCONST\n    \n    expr : designator\n    \n    expr : ID actuals\n    \n    expr : ISUNDEFINED '(' designator ')'\n    \n    expr : '(' expr ')'\n    \n    expr : FORALL quantifiers DO expr END\n         | EXISTS quantifiers DO expr END\n    \n    actuals : '(' exprlist ')'\n            | '(' ')'\n    \n    exprlist : exprlist ',' expr\n             | expr\n    \n    quantifier : ID ':' typeexpr\n    \n    quantifiers : quantifier ';' quantifiers\n                | quantifier\n    \n    optstmts : stmts\n             | empty\n    \n    stmts : stmts ';' stmt\n          | stmts ';'\n          | stmt\n    \n    stmt : assignment\n         | ifstmt\n         | whilestmt\n         | switchstmt\n         | forstmt\n         | proccall\n         | clearstmt\n         | errorstmt\n         | assertstmt\n         | aliasstmt\n         | returnstmt\n         | undefinestmt\n    \n    assignment : designator ASSIGN expr\n    \n    ifstmt : IF expr THEN optstmts optelses END\n    \n    optelses : elsif optelses\n             | optelse\n    \n    elsif : ELSIF expr THEN optstmts\n    \n    optelse : ELSE optstmts\n            | empty\n    \n    whilestmt : WHILE expr DO optstmts END\n    \n    switchstmt : SWITCH expr optcases optelse END\n    \n    optcases : optcases case\n             | empty\n    \n    case : CASE exprlist ':' optstmts\n    \n    forstmt : FOR quantifiers DO optstmts END\n    \n    proccall : ID actuals\n    \n    clearstmt : CLEAR designator\n    \n    undefinestmt : UNDEFINE designator\n    \n    errorstmt : ERROR STRING\n    \n    assertstmt : ASSERT expr optstring\n    \n    aliasstmt : ALIAS aliases DO optstmts END\n    \n    aliases : aliases ';' alias\n            | aliases ';'\n            | alias\n    \n    alias : ID ':' expr\n    \n    returnstmt : RETURN optretexpr\n    \n    optretexpr : expr\n               | empty\n    \n    rules : rule ';' rules\n          | rule ';'\n          | rule\n    \n    rule : simplerule\n         | aliasrule\n         | ruleset\n         | startstate\n         | invariant\n    \n    simplerule : RULE optstring optcondition optdecls optstmts END\n    \n    optcondition : expr LONGARROW\n                 | empty\n    \n    optstring : STRING\n              | empty\n    \n    aliasrule : ALIAS aliases DO rules END\n    \n    ruleset : RULESET quantifiers DO rules END\n    \n    startstate : STARTSTATE optstring optdecls optstmts END\n    \n    invariant : INVARIANT optstring expr\n    \n    empty :\n    "
    
_lr_action_items = {'CONST':([0,2,3,5,7,8,9,21,24,26,27,28,29,30,31,35,36,37,44,55,57,75,76,78,80,82,95,231,283,],[-148,7,-3,-2,-148,-148,-148,-148,-148,-4,-8,-5,-11,-6,-32,-148,-142,-143,-148,-148,-141,7,-3,-7,-10,-31,-140,-148,-148,]),'TYPE':([0,2,3,5,7,8,9,21,24,26,27,28,29,30,31,35,36,37,44,55,57,75,76,78,80,82,95,231,283,],[-148,8,-3,-2,-148,-148,-148,-148,-148,-4,-8,-5,-11,-6,-32,-148,-142,-143,-148,-148,-141,8,-3,-7,-10,-31,-140,-148,-148,]),'VAR':([0,2,3,5,7,8,9,21,24,26,27,28,29,30,31,35,36,37,44,53,54,55,57,75,76,78,80,82,95,175,231,283,],[-148,9,-3,-2,-148,-148,-148,-148,-148,-4,-8,-5,-11,-6,-32,-148,-142,-143,-148,91,91,-148,-141,9,-3,-7,-10,-31,-140,91,-148,-148,]),'PROCEDURE':([0,2,3,4,5,6,7,8,9,11,12,26,27,28,29,30,31,78,80,82,304,310,],[-148,-148,-3,14,-2,-38,-148,-148,-148,-36,-37,-4,-8,-5,-11,-6,-32,-7,-10,-31,-39,-40,]),'FUNCTION':([0,2,3,4,5,6,7,8,9,11,12,26,27,28,29,30,31,78,80,82,304,310,],[-148,-148,-3,15,-2,-38,-148,-148,-148,-36,-37,-4,-8,-5,-11,-6,-32,-7,-10,-31,-39,-40,]),'RULE':([0,2,3,4,5,6,7,8,9,11,12,26,27,28,29,30,31,32,68,71,78,80,82,304,310,],[-148,-148,-3,21,-2,-38,-148,-148,-148,-36,-37,-4,-8,-5,-11,-6,-32,21,21,21,-7,-10,-31,-39,-40,]),'ALIAS':([0,2,3,4,5,6,7,8,9,11,12,21,24,26,27,28,29,30,31,32,35,36,37,44,55,57,68,71,74,76,78,80,82,94,95,166,213,231,253,254,257,259,261,277,283,298,303,304,306,310,],[-148,-148,-3,22,-2,-38,-148,-148,-148,-36,-37,-148,-148,-4,-8,-5,-11,-6,-32,22,-148,-142,-143,-148,-148,-141,22,22,163,-52,-7,-10,-31,163,-140,-51,163,-148,163,163,163,163,163,163,-148,163,163,-39,163,-40,]),'RULESET':([0,2,3,4,5,6,7,8,9,11,12,26,27,28,29,30,31,32,68,71,78,80,82,304,310,],[-148,-148,-3,23,-2,-38,-148,-148,-148,-36,-37,-4,-8,-5,-11,-6,-32,23,23,23,-7,-10,-31,-39,-40,]),'STARTSTATE':([0,2,3,4,5,6,7,8,9,11,12,26,27,28,29,30,31,32,68,71,78,80,82,304,310,],[-148,-148,-3,24,-2,-38,-148,-148,-148,-36,-37,-4,-8,-5,-11,-6,-32,24,24,24,-7,-10,-31,-39,-40,]),'INVARIANT':([0,2,3,4,5,6,7,8,9,11,12,26,27,28,29,30,31,32,68,71,78,80,82,304,310,],[-148,-148,-3,25,-2,-38,-148,-148,-148,-36,-37,-4,-8,-5,-11,-6,-32,25,25,25,-7,-10,-31,-39,-40,]),'$end':([1,10,13,16,17,18,19,20,32,52,61,62,63,77,111,112,113,116,180,181,182,183,184,185,186,187,188,189,190,191,192,193,195,197,201,204,205,212,234,236,237,239,263,265,266,],[0,-1,-133,-134,-135,-136,-137,-138,-132,-131,-74,-75,-53,-147,-72,-73,-71,-76,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-55,-82,-78,-144,-145,-146,-139,-54,-81,-77,-56,-79,-80,]),'BEGIN':([5,7,8,9,21,24,26,27,28,29,30,31,35,36,37,44,55,57,75,76,78,80,82,95,231,283,],[-2,-148,-148,-148,-148,-148,-4,-8,-5,-11,-6,-32,-148,-142,-143,-148,-148,-141,166,-3,-7,-10,-31,-140,-148,-148,]),'ID':([7,8,9,14,15,21,22,23,24,25,26,27,28,29,30,31,35,36,37,44,45,53,54,55,57,58,59,60,65,66,67,69,70,72,73,74,76,78,79,80,81,82,84,85,91,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,115,117,118,136,155,156,157,158,160,162,163,164,165,166,172,173,175,202,203,206,207,211,213,214,231,233,235,238,246,248,249,253,254,257,259,261,268,277,279,283,286,290,298,303,306,],[-148,-148,-148,33,34,-148,40,43,-148,-148,47,-8,49,-11,51,-32,63,-142,-143,-148,63,86,86,-148,-141,63,63,63,63,43,43,40,63,43,127,159,-52,-7,63,-10,127,-31,169,127,86,159,-140,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,195,63,200,210,63,63,63,43,200,63,40,63,200,-51,229,127,86,63,63,243,63,127,159,63,-148,127,63,63,210,270,127,159,159,159,159,159,284,159,63,-148,127,63,159,159,159,]),';':([13,16,17,18,19,20,36,37,38,39,42,46,48,50,61,62,63,69,77,83,88,90,92,111,112,113,116,123,124,127,128,129,130,131,132,133,139,141,142,143,144,145,146,147,148,149,150,151,152,153,164,167,168,170,171,174,175,176,180,181,182,183,184,185,186,187,188,189,190,191,192,193,195,197,200,201,204,205,208,209,212,213,219,220,221,222,223,224,225,226,227,228,230,232,234,236,237,239,244,245,246,247,251,252,258,260,262,263,265,266,267,269,271,285,291,292,295,296,297,299,300,308,],[32,-134,-135,-136,-137,-138,-142,-143,69,-126,72,78,80,82,-74,-75,-53,-125,-147,-33,175,-45,-47,-72,-73,-71,-76,-124,-127,-18,-85,-13,-14,-15,-16,-17,213,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-148,-9,-12,-35,-48,231,-44,-46,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-55,-82,-53,-78,-144,-145,246,-26,-146,-91,-118,-119,-121,-148,69,-128,-129,-130,-120,-34,-50,-43,-139,-54,-81,-77,-22,-23,-25,-27,-90,-105,-122,-49,283,-56,-79,-80,-19,-24,-29,-28,-112,-113,-117,-123,304,-30,-106,310,]),'END':([13,16,17,18,19,20,21,24,32,35,36,37,44,52,55,57,61,62,63,74,76,77,94,95,111,112,113,116,122,125,127,129,130,131,132,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,164,166,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,195,197,200,201,204,205,208,209,212,213,217,219,220,221,222,224,225,226,227,231,234,236,237,239,240,241,244,245,246,247,251,252,253,254,255,256,257,258,259,261,263,265,266,267,269,271,273,274,275,276,277,278,280,281,282,283,285,287,288,289,291,292,293,295,296,298,299,300,301,303,305,306,307,309,],[-133,-134,-135,-136,-137,-138,-148,-148,-132,-148,-142,-143,-148,-131,-148,-141,-74,-75,-53,-148,-52,-147,-148,-140,-72,-73,-71,-76,204,205,-18,-13,-14,-15,-16,-17,212,-88,-89,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-148,-51,234,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-55,-82,-53,-78,-144,-145,245,-26,-146,-91,-148,-118,-119,-121,-148,-128,-129,-130,-120,-148,-139,-54,-81,-77,265,266,-22,-23,-25,-27,-90,-105,-148,-148,-148,-115,-148,-122,-148,-148,-56,-79,-80,-19,-24,-29,-148,291,292,-114,-148,-111,295,296,297,-148,-28,300,-148,-108,-112,-113,-110,-117,-123,-148,-30,-106,-107,-148,308,-148,-116,-109,]),'STRING':([21,24,25,61,62,63,111,112,113,116,161,180,181,182,183,184,185,186,187,188,189,190,191,192,193,195,197,201,222,236,237,239,263,265,266,],[36,36,36,-74,-75,-53,-72,-73,-71,-76,221,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-55,-82,-78,36,-54,-81,-77,-56,-79,-80,]),'!':([21,25,35,36,37,45,58,59,60,65,70,73,79,81,85,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,117,155,156,157,162,164,173,202,203,207,211,214,233,235,238,249,279,286,290,],[-148,-148,60,-142,-143,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'+':([21,25,35,36,37,45,56,58,59,60,61,62,63,65,70,73,77,79,81,85,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,119,124,127,135,155,156,157,162,164,167,173,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,197,198,201,202,203,207,211,214,215,216,217,222,225,233,235,236,237,238,239,240,241,244,249,252,263,264,265,266,279,286,290,302,],[-148,-148,58,-142,-143,58,106,58,58,58,-74,-75,-53,58,58,58,106,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-72,-73,106,58,-76,58,106,106,-53,106,58,58,58,58,58,106,58,106,106,106,106,106,106,106,106,106,106,-66,-67,-68,-69,-70,106,-55,-82,106,-78,58,58,58,58,58,106,106,106,106,106,58,58,-54,-81,58,-77,106,106,106,58,106,106,106,-79,-80,58,58,58,106,]),'-':([21,25,35,36,37,45,56,58,59,60,61,62,63,65,70,73,77,79,81,85,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,119,124,127,135,155,156,157,162,164,167,173,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,197,198,201,202,203,207,211,214,215,216,217,222,225,233,235,236,237,238,239,240,241,244,249,252,263,264,265,266,279,286,290,302,],[-148,-148,59,-142,-143,59,107,59,59,59,-74,-75,-53,59,59,59,107,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-72,-73,107,59,-76,59,107,107,-53,107,59,59,59,59,59,107,59,107,107,107,107,107,107,107,107,107,107,-66,-67,-68,-69,-70,107,-55,-82,107,-78,59,59,59,59,59,107,107,107,107,107,59,59,-54,-81,59,-77,107,107,107,59,107,107,107,-79,-80,59,59,59,107,]),'INTCONST':([21,25,35,36,37,45,58,59,60,65,70,73,79,81,85,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,117,155,156,157,162,164,173,202,203,207,211,214,233,235,238,249,279,286,290,],[-148,-148,61,-142,-143,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'ISUNDEFINED':([21,25,35,36,37,45,58,59,60,65,70,73,79,81,85,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,117,155,156,157,162,164,173,202,203,207,211,214,233,235,238,249,279,286,290,],[-148,-148,64,-142,-143,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'(':([21,25,33,34,35,36,37,45,58,59,60,63,64,65,70,73,79,81,85,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,117,127,155,156,157,159,162,164,173,202,203,207,211,214,233,235,238,249,279,286,290,],[-148,-148,53,54,65,-142,-143,65,65,65,65,117,118,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,117,65,65,65,117,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'FORALL':([21,25,35,36,37,45,58,59,60,65,70,73,79,81,85,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,117,155,156,157,162,164,173,202,203,207,211,214,233,235,238,249,279,286,290,],[-148,-148,66,-142,-143,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'EXISTS':([21,25,35,36,37,45,58,59,60,65,70,73,79,81,85,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,117,155,156,157,162,164,173,202,203,207,211,214,233,235,238,249,279,286,290,],[-148,-148,67,-142,-143,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'IF':([21,24,35,36,37,44,55,57,74,76,94,95,166,213,231,253,254,257,259,261,277,283,298,303,306,],[-148,-148,-148,-142,-143,-148,-148,-141,155,-52,155,-140,-51,155,-148,155,155,155,155,155,155,-148,155,155,155,]),'WHILE':([21,24,35,36,37,44,55,57,74,76,94,95,166,213,231,253,254,257,259,261,277,283,298,303,306,],[-148,-148,-148,-142,-143,-148,-148,-141,156,-52,156,-140,-51,156,-148,156,156,156,156,156,156,-148,156,156,156,]),'SWITCH':([21,24,35,36,37,44,55,57,74,76,94,95,166,213,231,253,254,257,259,261,277,283,298,303,306,],[-148,-148,-148,-142,-143,-148,-148,-141,157,-52,157,-140,-51,157,-148,157,157,157,157,157,157,-148,157,157,157,]),'FOR':([21,24,35,36,37,44,55,57,74,76,94,95,166,213,231,253,254,257,259,261,277,283,298,303,306,],[-148,-148,-148,-142,-143,-148,-148,-141,158,-52,158,-140,-51,158,-148,158,158,158,158,158,158,-148,158,158,158,]),'CLEAR':([21,24,35,36,37,44,55,57,74,76,94,95,166,213,231,253,254,257,259,261,277,283,298,303,306,],[-148,-148,-148,-142,-143,-148,-148,-141,160,-52,160,-140,-51,160,-148,160,160,160,160,160,160,-148,160,160,160,]),'ERROR':([21,24,35,36,37,44,55,57,74,76,94,95,166,213,231,253,254,257,259,261,277,283,298,303,306,],[-148,-148,-148,-142,-143,-148,-148,-141,161,-52,161,-140,-51,161,-148,161,161,161,161,161,161,-148,161,161,161,]),'ASSERT':([21,24,35,36,37,44,55,57,74,76,94,95,166,213,231,253,254,257,259,261,277,283,298,303,306,],[-148,-148,-148,-142,-143,-148,-148,-141,162,-52,162,-140,-51,162,-148,162,162,162,162,162,162,-148,162,162,162,]),'RETURN':([21,24,35,36,37,44,55,57,74,76,94,95,166,213,231,253,254,257,259,261,277,283,298,303,306,],[-148,-148,-148,-142,-143,-148,-148,-141,164,-52,164,-140,-51,164,-148,164,164,164,164,164,164,-148,164,164,164,]),'UNDEFINE':([21,24,35,36,37,44,55,57,74,76,94,95,166,213,231,253,254,257,259,261,277,283,298,303,306,],[-148,-148,-148,-142,-143,-148,-148,-141,165,-52,165,-140,-51,165,-148,165,165,165,165,165,165,-148,165,165,165,]),'ELSIF':([36,37,61,62,63,111,112,113,116,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,164,180,181,182,183,184,185,186,187,188,189,190,191,192,193,195,197,200,201,213,219,220,221,222,224,225,226,227,236,237,239,251,252,253,258,263,265,266,273,288,291,292,295,296,300,306,309,],[-142,-143,-74,-75,-53,-72,-73,-71,-76,-88,-89,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-148,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-55,-82,-53,-78,-91,-118,-119,-121,-148,-128,-129,-130,-120,-54,-81,-77,-90,-105,-148,-122,-56,-79,-80,290,290,-112,-113,-117,-123,-106,-148,-109,]),'ELSE':([36,37,61,62,63,111,112,113,116,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,164,180,181,182,183,184,185,186,187,188,189,190,191,192,193,195,197,200,201,213,217,219,220,221,222,224,225,226,227,236,237,239,251,252,253,255,256,258,263,265,266,273,276,288,291,292,295,296,300,303,306,307,309,],[-142,-143,-74,-75,-53,-72,-73,-71,-76,-88,-89,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-148,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-55,-82,-53,-78,-91,-148,-118,-119,-121,-148,-128,-129,-130,-120,-54,-81,-77,-90,-105,-148,277,-115,-122,-56,-79,-80,277,-114,277,-112,-113,-117,-123,-106,-148,-148,-116,-109,]),'CASE':([36,37,61,62,63,111,112,113,116,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,164,180,181,182,183,184,185,186,187,188,189,190,191,192,193,195,197,200,201,213,217,219,220,221,222,224,225,226,227,236,237,239,251,252,255,256,258,263,265,266,276,291,292,295,296,300,303,307,],[-142,-143,-74,-75,-53,-72,-73,-71,-76,-88,-89,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-148,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-55,-82,-53,-78,-91,-148,-118,-119,-121,-148,-128,-129,-130,-120,-54,-81,-77,-90,-105,279,-115,-122,-56,-79,-80,-114,-112,-113,-117,-123,-106,-148,-116,]),'DO':([38,39,41,42,61,62,63,69,111,112,113,116,120,121,123,124,126,127,128,129,130,131,132,133,180,181,182,183,184,185,186,187,188,189,190,191,192,193,195,197,201,216,218,223,236,237,239,244,245,263,265,266,267,299,],[68,-126,71,-87,-74,-75,-53,-125,-72,-73,-71,-76,202,203,-124,-127,-86,-18,-85,-13,-14,-15,-16,-17,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-55,-82,-78,254,257,259,-54,-81,-77,-22,-23,-56,-79,-80,-19,-30,]),':':([40,43,47,49,51,61,62,63,86,111,112,113,116,169,177,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,195,197,198,201,210,229,236,237,239,263,264,265,266,270,294,],[70,73,79,81,85,-74,-75,-53,173,-72,-73,-71,-76,85,233,235,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-55,-82,-84,-78,249,173,-54,-81,-77,-56,-83,-79,-80,249,303,]),',':([51,61,62,63,86,111,112,113,116,169,180,181,182,183,184,185,186,187,188,189,190,191,192,193,195,196,197,198,201,210,229,236,237,239,242,243,263,264,265,266,270,284,294,],[84,-74,-75,-53,172,-72,-73,-71,-76,84,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-55,238,-82,-84,-78,248,172,-54,-81,-77,268,-21,-56,-83,-79,-80,248,-20,238,]),')':([53,54,61,62,63,87,88,89,90,92,93,111,112,113,116,117,119,127,129,130,131,132,133,171,175,176,180,181,182,183,184,185,186,187,188,189,190,191,192,193,195,196,197,198,199,200,201,230,232,236,237,239,244,245,260,263,264,265,266,267,299,],[-148,-148,-74,-75,-53,174,-41,-42,-45,-47,177,-72,-73,-71,-76,197,201,-18,-13,-14,-15,-16,-17,-48,-44,-46,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-55,237,-82,-84,239,-53,-78,-50,-43,-54,-81,-77,-22,-23,-49,-56,-83,-79,-80,-19,-30,]),'LONGARROW':([56,61,62,63,111,112,113,116,180,181,182,183,184,185,186,187,188,189,190,191,192,193,195,197,201,236,237,239,263,265,266,],[95,-74,-75,-53,-72,-73,-71,-76,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-55,-82,-78,-54,-81,-77,-56,-79,-80,]),'?':([56,61,62,63,77,111,112,113,116,119,124,127,135,167,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,197,198,201,215,216,217,222,225,236,237,239,240,241,244,252,263,264,265,266,302,],[96,-74,-75,-53,96,-72,-73,-71,-76,96,96,-53,96,96,96,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,96,-55,-82,96,-78,96,96,96,96,96,-54,-81,-77,96,96,96,96,None,96,-79,-80,96,]),'IMPLIES':([56,61,62,63,77,111,112,113,116,119,124,127,135,167,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,197,198,201,215,216,217,222,225,236,237,239,240,241,244,252,263,264,265,266,302,],[97,-74,-75,-53,97,-72,-73,-71,-76,97,97,-53,97,97,97,None,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,97,-55,-82,97,-78,97,97,97,97,97,-54,-81,-77,97,97,97,97,97,97,-79,-80,97,]),'|':([56,61,62,63,77,111,112,113,116,119,124,127,135,167,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,197,198,201,215,216,217,222,225,236,237,239,240,241,244,252,263,264,265,266,302,],[98,-74,-75,-53,98,-72,-73,-71,-76,98,98,-53,98,98,98,98,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,98,-55,-82,98,-78,98,98,98,98,98,-54,-81,-77,98,98,98,98,98,98,-79,-80,98,]),'&':([56,61,62,63,77,111,112,113,116,119,124,127,135,167,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,197,198,201,215,216,217,222,225,236,237,239,240,241,244,252,263,264,265,266,302,],[99,-74,-75,-53,99,-72,-73,-71,-76,99,99,-53,99,99,99,99,99,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,99,-55,-82,99,-78,99,99,99,99,99,-54,-81,-77,99,99,99,99,99,99,-79,-80,99,]),'<':([56,61,62,63,77,111,112,113,116,119,124,127,135,167,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,197,198,201,215,216,217,222,225,236,237,239,240,241,244,252,263,264,265,266,302,],[100,-74,-75,-53,100,-72,-73,100,-76,100,100,-53,100,100,100,100,100,100,None,None,None,None,None,None,-66,-67,-68,-69,-70,100,-55,-82,100,-78,100,100,100,100,100,-54,-81,-77,100,100,100,100,100,100,-79,-80,100,]),'LEQ':([56,61,62,63,77,111,112,113,116,119,124,127,135,167,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,197,198,201,215,216,217,222,225,236,237,239,240,241,244,252,263,264,265,266,302,],[101,-74,-75,-53,101,-72,-73,101,-76,101,101,-53,101,101,101,101,101,101,None,None,None,None,None,None,-66,-67,-68,-69,-70,101,-55,-82,101,-78,101,101,101,101,101,-54,-81,-77,101,101,101,101,101,101,-79,-80,101,]),'>':([56,61,62,63,77,111,112,113,116,119,124,127,135,167,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,197,198,201,215,216,217,222,225,236,237,239,240,241,244,252,263,264,265,266,302,],[102,-74,-75,-53,102,-72,-73,102,-76,102,102,-53,102,102,102,102,102,102,None,None,None,None,None,None,-66,-67,-68,-69,-70,102,-55,-82,102,-78,102,102,102,102,102,-54,-81,-77,102,102,102,102,102,102,-79,-80,102,]),'GEQ':([56,61,62,63,77,111,112,113,116,119,124,127,135,167,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,197,198,201,215,216,217,222,225,236,237,239,240,241,244,252,263,264,265,266,302,],[103,-74,-75,-53,103,-72,-73,103,-76,103,103,-53,103,103,103,103,103,103,None,None,None,None,None,None,-66,-67,-68,-69,-70,103,-55,-82,103,-78,103,103,103,103,103,-54,-81,-77,103,103,103,103,103,103,-79,-80,103,]),'=':([56,61,62,63,77,111,112,113,116,119,124,127,135,167,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,197,198,201,215,216,217,222,225,236,237,239,240,241,244,252,263,264,265,266,302,],[104,-74,-75,-53,104,-72,-73,104,-76,104,104,-53,104,104,104,104,104,104,None,None,None,None,None,None,-66,-67,-68,-69,-70,104,-55,-82,104,-78,104,104,104,104,104,-54,-81,-77,104,104,104,104,104,104,-79,-80,104,]),'NEQ':([56,61,62,63,77,111,112,113,116,119,124,127,135,167,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,197,198,201,215,216,217,222,225,236,237,239,240,241,244,252,263,264,265,266,302,],[105,-74,-75,-53,105,-72,-73,105,-76,105,105,-53,105,105,105,105,105,105,None,None,None,None,None,None,-66,-67,-68,-69,-70,105,-55,-82,105,-78,105,105,105,105,105,-54,-81,-77,105,105,105,105,105,105,-79,-80,105,]),'*':([56,61,62,63,77,111,112,113,116,119,124,127,135,167,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,197,198,201,215,216,217,222,225,236,237,239,240,241,244,252,263,264,265,266,302,],[108,-74,-75,-53,108,-72,-73,108,-76,108,108,-53,108,108,108,108,108,108,108,108,108,108,108,108,108,108,-68,-69,-70,108,-55,-82,108,-78,108,108,108,108,108,-54,-81,-77,108,108,108,108,108,108,-79,-80,108,]),'/':([56,61,62,63,77,111,112,113,116,119,124,127,135,167,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,197,198,201,215,216,217,222,225,236,237,239,240,241,244,252,263,264,265,266,302,],[109,-74,-75,-53,109,-72,-73,109,-76,109,109,-53,109,109,109,109,109,109,109,109,109,109,109,109,109,109,-68,-69,-70,109,-55,-82,109,-78,109,109,109,109,109,-54,-81,-77,109,109,109,109,109,109,-79,-80,109,]),'%':([56,61,62,63,77,111,112,113,116,119,124,127,135,167,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,197,198,201,215,216,217,222,225,236,237,239,240,241,244,252,263,264,265,266,302,],[110,-74,-75,-53,110,-72,-73,110,-76,110,110,-53,110,110,110,110,110,110,110,110,110,110,110,110,110,110,-68,-69,-70,110,-55,-82,110,-78,110,110,110,110,110,-54,-81,-77,110,110,110,110,110,110,-79,-80,110,]),'DOTDOT':([61,62,63,111,112,113,116,127,135,180,181,182,183,184,185,186,187,188,189,190,191,192,193,195,197,201,236,237,239,263,265,266,],[-74,-75,-53,-72,-73,-71,-76,-53,207,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-55,-82,-78,-54,-81,-77,-56,-79,-80,]),']':([61,62,63,111,112,113,116,127,129,130,131,132,133,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,197,201,236,237,239,244,245,250,263,265,266,267,299,],[-74,-75,-53,-72,-73,-71,-76,-18,-13,-14,-15,-16,-17,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,236,-55,-82,-78,-54,-81,-77,-22,-23,272,-56,-79,-80,-19,-30,]),'THEN':([61,62,63,111,112,113,116,180,181,182,183,184,185,186,187,188,189,190,191,192,193,195,197,201,215,236,237,239,263,265,266,302,],[-74,-75,-53,-72,-73,-71,-76,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-55,-82,-78,253,-54,-81,-77,-56,-79,-80,306,]),'[':([62,63,127,137,154,159,195,199,200,220,227,236,],[114,-53,-53,211,114,-53,-55,114,-53,114,114,-54,]),'.':([62,63,127,154,159,195,199,200,220,227,236,],[115,-53,-53,115,-53,-55,115,-53,115,115,-54,]),'ENUM':([73,81,85,173,211,233,249,286,],[134,134,134,134,134,134,134,134,]),'RECORD':([73,81,85,173,211,233,249,286,],[136,136,136,136,136,136,136,136,]),'ARRAY':([73,81,85,173,211,233,249,286,],[137,137,137,137,137,137,137,137,]),'{':([134,],[206,]),'ASSIGN':([154,159,195,236,],[214,-53,-55,-54,]),'}':([242,243,284,],[267,-21,-20,]),'OF':([272,],[286,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'decls':([0,44,55,231,283,],[2,75,75,75,75,]),'empty':([0,2,7,8,9,21,24,25,35,44,53,54,55,74,94,164,217,222,231,253,254,255,257,259,261,273,277,283,288,298,303,306,],[3,6,27,29,31,37,37,37,57,76,89,89,76,140,140,226,256,37,76,140,140,278,140,140,140,278,140,76,278,140,140,140,]),'procdecls':([2,],[4,]),'decl':([2,75,],[5,5,]),'rules':([4,32,68,71,],[10,52,122,125,]),'procdecl':([4,],[11,]),'funcdecl':([4,],[12,]),'rule':([4,32,68,71,],[13,13,13,13,]),'simplerule':([4,32,68,71,],[16,16,16,16,]),'aliasrule':([4,32,68,71,],[17,17,17,17,]),'ruleset':([4,32,68,71,],[18,18,18,18,]),'startstate':([4,32,68,71,],[19,19,19,19,]),'invariant':([4,32,68,71,],[20,20,20,20,]),'constdecls':([7,],[26,]),'typedecls':([8,],[28,]),'vardecls':([9,],[30,]),'optstring':([21,24,25,222,],[35,44,45,258,]),'aliases':([22,163,],[38,223,]),'alias':([22,69,163,],[39,123,39,]),'quantifiers':([23,66,67,72,158,],[41,120,121,126,218,]),'quantifier':([23,66,67,72,158,],[42,42,42,42,42,]),'constdecl':([26,],[46,]),'typedecl':([28,],[48,]),'vardecl':([30,],[50,]),'optcondition':([35,],[55,]),'expr':([35,45,58,59,60,65,70,73,79,81,85,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,117,155,156,157,162,164,173,202,203,207,211,214,233,235,238,249,279,286,290,],[56,77,111,112,113,119,124,135,167,135,135,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,198,215,216,217,222,225,135,240,241,244,135,252,135,263,264,135,198,135,302,]),'designator':([35,45,58,59,60,65,70,73,74,79,81,85,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,117,118,155,156,157,160,162,164,165,173,202,203,207,211,213,214,233,235,238,249,253,254,257,259,261,277,279,286,290,298,303,306,],[62,62,62,62,62,62,62,62,154,62,62,62,154,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,199,62,62,62,220,62,62,227,62,62,62,62,62,154,62,62,62,62,62,154,154,154,154,154,154,62,62,62,154,154,154,]),'optdecls':([44,55,231,283,],[74,94,261,298,]),'vardecltail':([51,169,],[83,228,]),'optformals':([53,54,],[87,93,]),'formals':([53,54,],[88,88,]),'formal':([53,54,175,],[90,90,232,]),'formalrest':([53,54,91,175,],[92,92,176,92,]),'actuals':([63,127,159,],[116,116,219,]),'typeexpr':([73,81,85,173,211,233,249,286,],[128,168,170,230,250,262,271,299,]),'typeid':([73,81,85,173,211,233,249,286,],[129,129,129,129,129,129,129,129,]),'enumtype':([73,81,85,173,211,233,249,286,],[130,130,130,130,130,130,130,130,]),'subrangetype':([73,81,85,173,211,233,249,286,],[131,131,131,131,131,131,131,131,]),'recordtype':([73,81,85,173,211,233,249,286,],[132,132,132,132,132,132,132,132,]),'arraytype':([73,81,85,173,211,233,249,286,],[133,133,133,133,133,133,133,133,]),'optstmts':([74,94,253,254,257,259,261,277,298,303,306,],[138,178,273,274,280,281,282,293,305,307,309,]),'stmts':([74,94,253,254,257,259,261,277,298,303,306,],[139,139,139,139,139,139,139,139,139,139,139,]),'stmt':([74,94,213,253,254,257,259,261,277,298,303,306,],[141,141,251,141,141,141,141,141,141,141,141,141,]),'assignment':([74,94,213,253,254,257,259,261,277,298,303,306,],[142,142,142,142,142,142,142,142,142,142,142,142,]),'ifstmt':([74,94,213,253,254,257,259,261,277,298,303,306,],[143,143,143,143,143,143,143,143,143,143,143,143,]),'whilestmt':([74,94,213,253,254,257,259,261,277,298,303,306,],[144,144,144,144,144,144,144,144,144,144,144,144,]),'switchstmt':([74,94,213,253,254,257,259,261,277,298,303,306,],[145,145,145,145,145,145,145,145,145,145,145,145,]),'forstmt':([74,94,213,253,254,257,259,261,277,298,303,306,],[146,146,146,146,146,146,146,146,146,146,146,146,]),'proccall':([74,94,213,253,254,257,259,261,277,298,303,306,],[147,147,147,147,147,147,147,147,147,147,147,147,]),'clearstmt':([74,94,213,253,254,257,259,261,277,298,303,306,],[148,148,148,148,148,148,148,148,148,148,148,148,]),'errorstmt':([74,94,213,253,254,257,259,261,277,298,303,306,],[149,149,149,149,149,149,149,149,149,149,149,149,]),'assertstmt':([74,94,213,253,254,257,259,261,277,298,303,306,],[150,150,150,150,150,150,150,150,150,150,150,150,]),'aliasstmt':([74,94,213,253,254,257,259,261,277,298,303,306,],[151,151,151,151,151,151,151,151,151,151,151,151,]),'returnstmt':([74,94,213,253,254,257,259,261,277,298,303,306,],[152,152,152,152,152,152,152,152,152,152,152,152,]),'undefinestmt':([74,94,213,253,254,257,259,261,277,298,303,306,],[153,153,153,153,153,153,153,153,153,153,153,153,]),'formaltail':([86,229,],[171,260,]),'exprlist':([117,279,],[196,294,]),'fields':([136,],[208,]),'field':([136,246,],[209,269,]),'optretexpr':([164,],[224,]),'enums':([206,],[242,]),'fieldtail':([210,270,],[247,285,]),'optcases':([217,],[255,]),'optelse':([255,273,288,],[275,289,289,]),'case':([255,],[276,]),'optelses':([273,288,],[287,301,]),'elsif':([273,288,],[288,288,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> decls procdecls rules','prog',3,'p_prog','muparse.py',19),
  ('decls -> decls decl','decls',2,'p_decls','muparse.py',30),
  ('decls -> empty','decls',1,'p_decls','muparse.py',31),
  ('decl -> CONST constdecls','decl',2,'p_decl','muparse.py',40),
  ('decl -> TYPE typedecls','decl',2,'p_decl','muparse.py',41),
  ('decl -> VAR vardecls','decl',2,'p_decl','muparse.py',42),
  ('constdecls -> constdecls constdecl ;','constdecls',3,'p_constdecls','muparse.py',48),
  ('constdecls -> empty','constdecls',1,'p_constdecls','muparse.py',49),
  ('constdecl -> ID : expr','constdecl',3,'p_constdecl','muparse.py',58),
  ('typedecls -> typedecls typedecl ;','typedecls',3,'p_typedecls','muparse.py',64),
  ('typedecls -> empty','typedecls',1,'p_typedecls','muparse.py',65),
  ('typedecl -> ID : typeexpr','typedecl',3,'p_typedecl','muparse.py',74),
  ('typeexpr -> typeid','typeexpr',1,'p_typeexpr','muparse.py',80),
  ('typeexpr -> enumtype','typeexpr',1,'p_typeexpr','muparse.py',81),
  ('typeexpr -> subrangetype','typeexpr',1,'p_typeexpr','muparse.py',82),
  ('typeexpr -> recordtype','typeexpr',1,'p_typeexpr','muparse.py',83),
  ('typeexpr -> arraytype','typeexpr',1,'p_typeexpr','muparse.py',84),
  ('typeid -> ID','typeid',1,'p_typeid','muparse.py',90),
  ('enumtype -> ENUM { enums }','enumtype',4,'p_enumtype','muparse.py',96),
  ('enums -> enums , ID','enums',3,'p_enums','muparse.py',102),
  ('enums -> ID','enums',1,'p_enums','muparse.py',103),
  ('subrangetype -> expr DOTDOT expr','subrangetype',3,'p_subrangetype','muparse.py',112),
  ('recordtype -> RECORD fields END','recordtype',3,'p_recordtype','muparse.py',118),
  ('fields -> fields ; field','fields',3,'p_fields','muparse.py',124),
  ('fields -> fields ;','fields',2,'p_fields','muparse.py',125),
  ('fields -> field','fields',1,'p_fields','muparse.py',126),
  ('field -> ID fieldtail','field',2,'p_field','muparse.py',135),
  ('fieldtail -> , ID fieldtail','fieldtail',3,'p_fieldtail','muparse.py',143),
  ('fieldtail -> : typeexpr','fieldtail',2,'p_fieldtail','muparse.py',144),
  ('arraytype -> ARRAY [ typeexpr ] OF typeexpr','arraytype',6,'p_arraytype','muparse.py',155),
  ('vardecls -> vardecls vardecl ;','vardecls',3,'p_vardecls','muparse.py',161),
  ('vardecls -> empty','vardecls',1,'p_vardecls','muparse.py',162),
  ('vardecl -> ID vardecltail','vardecl',2,'p_vardecl','muparse.py',171),
  ('vardecltail -> , ID vardecltail','vardecltail',3,'p_vardecltail','muparse.py',179),
  ('vardecltail -> : typeexpr','vardecltail',2,'p_vardecltail','muparse.py',180),
  ('procdecls -> procdecls procdecl','procdecls',2,'p_procdecls','muparse.py',191),
  ('procdecls -> procdecls funcdecl','procdecls',2,'p_procdecls','muparse.py',192),
  ('procdecls -> empty','procdecls',1,'p_procdecls','muparse.py',193),
  ('procdecl -> PROCEDURE ID ( optformals ) ; optdecls optstmts END ;','procdecl',10,'p_procdecl','muparse.py',202),
  ('funcdecl -> FUNCTION ID ( optformals ) : typeexpr ; optdecls optstmts END ;','funcdecl',12,'p_funcdecl','muparse.py',208),
  ('optformals -> formals','optformals',1,'p_optformals','muparse.py',214),
  ('optformals -> empty','optformals',1,'p_optformals','muparse.py',215),
  ('formals -> formals ; formal','formals',3,'p_formals','muparse.py',224),
  ('formals -> formals ;','formals',2,'p_formals','muparse.py',225),
  ('formals -> formal','formals',1,'p_formals','muparse.py',226),
  ('formal -> VAR formalrest','formal',2,'p_formal','muparse.py',235),
  ('formal -> formalrest','formal',1,'p_formal','muparse.py',236),
  ('formalrest -> ID formaltail','formalrest',2,'p_formalrest','muparse.py',247),
  ('formaltail -> , ID formaltail','formaltail',3,'p_formaltail','muparse.py',255),
  ('formaltail -> : typeexpr','formaltail',2,'p_formaltail','muparse.py',256),
  ('optdecls -> decls BEGIN','optdecls',2,'p_optdecls','muparse.py',267),
  ('optdecls -> empty','optdecls',1,'p_optdecls','muparse.py',268),
  ('designator -> ID','designator',1,'p_designator','muparse.py',277),
  ('designator -> designator [ expr ]','designator',4,'p_designator','muparse.py',278),
  ('designator -> designator . ID','designator',3,'p_designator','muparse.py',279),
  ('expr -> expr ? expr : expr','expr',5,'p_ternaryexpr','muparse.py',290),
  ('expr -> expr IMPLIES expr','expr',3,'p_binaryexpr','muparse.py',296),
  ('expr -> expr | expr','expr',3,'p_binaryexpr','muparse.py',297),
  ('expr -> expr & expr','expr',3,'p_binaryexpr','muparse.py',298),
  ('expr -> expr < expr','expr',3,'p_binaryexpr','muparse.py',299),
  ('expr -> expr LEQ expr','expr',3,'p_binaryexpr','muparse.py',300),
  ('expr -> expr > expr','expr',3,'p_binaryexpr','muparse.py',301),
  ('expr -> expr GEQ expr','expr',3,'p_binaryexpr','muparse.py',302),
  ('expr -> expr = expr','expr',3,'p_binaryexpr','muparse.py',303),
  ('expr -> expr NEQ expr','expr',3,'p_binaryexpr','muparse.py',304),
  ('expr -> expr + expr','expr',3,'p_binaryexpr','muparse.py',305),
  ('expr -> expr - expr','expr',3,'p_binaryexpr','muparse.py',306),
  ('expr -> expr * expr','expr',3,'p_binaryexpr','muparse.py',307),
  ('expr -> expr / expr','expr',3,'p_binaryexpr','muparse.py',308),
  ('expr -> expr % expr','expr',3,'p_binaryexpr','muparse.py',309),
  ('expr -> ! expr','expr',2,'p_unaryexpr','muparse.py',315),
  ('expr -> + expr','expr',2,'p_unaryexpr','muparse.py',316),
  ('expr -> - expr','expr',2,'p_unaryexpr','muparse.py',317),
  ('expr -> INTCONST','expr',1,'p_constexpr','muparse.py',323),
  ('expr -> designator','expr',1,'p_desigexpr','muparse.py',329),
  ('expr -> ID actuals','expr',2,'p_funcexpr','muparse.py',335),
  ('expr -> ISUNDEFINED ( designator )','expr',4,'p_undefexpr','muparse.py',341),
  ('expr -> ( expr )','expr',3,'p_parenexpr','muparse.py',347),
  ('expr -> FORALL quantifiers DO expr END','expr',5,'p_quantexpr','muparse.py',353),
  ('expr -> EXISTS quantifiers DO expr END','expr',5,'p_quantexpr','muparse.py',354),
  ('actuals -> ( exprlist )','actuals',3,'p_actuals','muparse.py',364),
  ('actuals -> ( )','actuals',2,'p_actuals','muparse.py',365),
  ('exprlist -> exprlist , expr','exprlist',3,'p_exprlist','muparse.py',374),
  ('exprlist -> expr','exprlist',1,'p_exprlist','muparse.py',375),
  ('quantifier -> ID : typeexpr','quantifier',3,'p_quantifier','muparse.py',384),
  ('quantifiers -> quantifier ; quantifiers','quantifiers',3,'p_quantifiers','muparse.py',390),
  ('quantifiers -> quantifier','quantifiers',1,'p_quantifiers','muparse.py',391),
  ('optstmts -> stmts','optstmts',1,'p_optstmts','muparse.py',400),
  ('optstmts -> empty','optstmts',1,'p_optstmts','muparse.py',401),
  ('stmts -> stmts ; stmt','stmts',3,'p_stmts','muparse.py',410),
  ('stmts -> stmts ;','stmts',2,'p_stmts','muparse.py',411),
  ('stmts -> stmt','stmts',1,'p_stmts','muparse.py',412),
  ('stmt -> assignment','stmt',1,'p_stmt','muparse.py',423),
  ('stmt -> ifstmt','stmt',1,'p_stmt','muparse.py',424),
  ('stmt -> whilestmt','stmt',1,'p_stmt','muparse.py',425),
  ('stmt -> switchstmt','stmt',1,'p_stmt','muparse.py',426),
  ('stmt -> forstmt','stmt',1,'p_stmt','muparse.py',427),
  ('stmt -> proccall','stmt',1,'p_stmt','muparse.py',428),
  ('stmt -> clearstmt','stmt',1,'p_stmt','muparse.py',429),
  ('stmt -> errorstmt','stmt',1,'p_stmt','muparse.py',430),
  ('stmt -> assertstmt','stmt',1,'p_stmt','muparse.py',431),
  ('stmt -> aliasstmt','stmt',1,'p_stmt','muparse.py',432),
  ('stmt -> returnstmt','stmt',1,'p_stmt','muparse.py',433),
  ('stmt -> undefinestmt','stmt',1,'p_stmt','muparse.py',434),
  ('assignment -> designator ASSIGN expr','assignment',3,'p_assignment','muparse.py',440),
  ('ifstmt -> IF expr THEN optstmts optelses END','ifstmt',6,'p_ifstmt','muparse.py',446),
  ('optelses -> elsif optelses','optelses',2,'p_optelses','muparse.py',452),
  ('optelses -> optelse','optelses',1,'p_optelses','muparse.py',453),
  ('elsif -> ELSIF expr THEN optstmts','elsif',4,'p_elsif','muparse.py',464),
  ('optelse -> ELSE optstmts','optelse',2,'p_optelse','muparse.py',470),
  ('optelse -> empty','optelse',1,'p_optelse','muparse.py',471),
  ('whilestmt -> WHILE expr DO optstmts END','whilestmt',5,'p_whilestmt','muparse.py',480),
  ('switchstmt -> SWITCH expr optcases optelse END','switchstmt',5,'p_switchstmt','muparse.py',486),
  ('optcases -> optcases case','optcases',2,'p_optcases','muparse.py',492),
  ('optcases -> empty','optcases',1,'p_optcases','muparse.py',493),
  ('case -> CASE exprlist : optstmts','case',4,'p_case','muparse.py',503),
  ('forstmt -> FOR quantifiers DO optstmts END','forstmt',5,'p_forstmt','muparse.py',509),
  ('proccall -> ID actuals','proccall',2,'p_proccall','muparse.py',515),
  ('clearstmt -> CLEAR designator','clearstmt',2,'p_clearstmt','muparse.py',521),
  ('undefinestmt -> UNDEFINE designator','undefinestmt',2,'p_undefinestmt','muparse.py',527),
  ('errorstmt -> ERROR STRING','errorstmt',2,'p_errorstmt','muparse.py',533),
  ('assertstmt -> ASSERT expr optstring','assertstmt',3,'p_assertstmt','muparse.py',539),
  ('aliasstmt -> ALIAS aliases DO optstmts END','aliasstmt',5,'p_aliasstmt','muparse.py',545),
  ('aliases -> aliases ; alias','aliases',3,'p_aliases','muparse.py',551),
  ('aliases -> aliases ;','aliases',2,'p_aliases','muparse.py',552),
  ('aliases -> alias','aliases',1,'p_aliases','muparse.py',553),
  ('alias -> ID : expr','alias',3,'p_alias','muparse.py',565),
  ('returnstmt -> RETURN optretexpr','returnstmt',2,'p_returnstmt','muparse.py',571),
  ('optretexpr -> expr','optretexpr',1,'p_optretexpr','muparse.py',577),
  ('optretexpr -> empty','optretexpr',1,'p_optretexpr','muparse.py',578),
  ('rules -> rule ; rules','rules',3,'p_rules','muparse.py',587),
  ('rules -> rule ;','rules',2,'p_rules','muparse.py',588),
  ('rules -> rule','rules',1,'p_rules','muparse.py',589),
  ('rule -> simplerule','rule',1,'p_rule','muparse.py',598),
  ('rule -> aliasrule','rule',1,'p_rule','muparse.py',599),
  ('rule -> ruleset','rule',1,'p_rule','muparse.py',600),
  ('rule -> startstate','rule',1,'p_rule','muparse.py',601),
  ('rule -> invariant','rule',1,'p_rule','muparse.py',602),
  ('simplerule -> RULE optstring optcondition optdecls optstmts END','simplerule',6,'p_simplerule','muparse.py',608),
  ('optcondition -> expr LONGARROW','optcondition',2,'p_optcondition','muparse.py',614),
  ('optcondition -> empty','optcondition',1,'p_optcondition','muparse.py',615),
  ('optstring -> STRING','optstring',1,'p_optstring','muparse.py',624),
  ('optstring -> empty','optstring',1,'p_optstring','muparse.py',625),
  ('aliasrule -> ALIAS aliases DO rules END','aliasrule',5,'p_aliasrule','muparse.py',634),
  ('ruleset -> RULESET quantifiers DO rules END','ruleset',5,'p_ruleset','muparse.py',640),
  ('startstate -> STARTSTATE optstring optdecls optstmts END','startstate',5,'p_startstate','muparse.py',646),
  ('invariant -> INVARIANT optstring expr','invariant',3,'p_invariant','muparse.py',652),
  ('empty -> <empty>','empty',0,'p_empty','muparse.py',658),
]
